name: Run sonarcloud analysis
on:
  push:
   branches-ignore:
      - '**'
  #      branches:
  #        - main
  #        - dokken/*
  # pull_request:
  #   branches:
  #     - main
jobs:
  build:
    name: Sonarcloud analysis
    runs-on: ubuntu-latest
    container: dolfinx/dev-env
    env:
      SONAR_SCANNER_VERSION:
        4.6.2.2472 # Find the latest version at:
        # https://github.com/SonarSource/sonar-scanner-cli/tags
        # https://sonarcloud.io/documentation/analysis/scan/sonarscanner/
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
      PETSC_ARCH: linux-gnu-real-32
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install zip
        run: |
          apt-get -y update
          apt-get install unzip
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          wget -O $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          wget -O $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

      - name: Get Basix and install
        uses: actions/checkout@v2
        with:
          path: ./basix
          repository: FEniCS/basix
          ref: main

      - name: Get DOLFINx
        uses: actions/checkout@v2
        with:
          path: ./dolfinx
          repository: FEniCS/dolfinx
          ref: main

      - name: Install FEniCS Python components (DOLFINx)
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -B build-basix -S ./basix/cpp
          cmake --build build-basix
          cmake --install build-basix
          python3 -m pip install ./basix/python
          python3 -m pip install git+https://github.com/FEniCS/ufl.git
          python3 -m pip install git+https://github.com/FEniCS/ffcx.git
          cmake -G Ninja -DCMAKE_BUILD_TYPE="Release" -B build-dolfinx -S ./dolfinx/cpp/
          cmake --build build-dolfinx
          cmake --install build-dolfinx
          BUILD_TYPE="Release" python3 -m pip -v install ./dolfinx/python/

      - name: Get Custom assemblers
        uses: actions/checkout@v2
        with:
          path: ./asimov-custom-assemblers
          repository: Wells-Group/asimov-custom-assemblers
          ref: main

      - name: Install custom assemblers
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -B build-cuas -S ./asimov-custom-assemblers/cpp
          ninja -C build-cuas install
          BUILD_TYPE=Debug python3 -m pip -v install ./asimov-custom-assemblers/python/

      - name: Run build-wrapper
        run: |
          cmake -S ./cpp -B build-contact
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build-contact/ --config Release

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
