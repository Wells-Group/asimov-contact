name: Test Nitsche solver

on:
  # Trigger tests on push
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  schedule:
    # '*' is a special character in YAML, so string must be quoted
    - cron: "0 1 * * *"
jobs:
  build:
    runs-on: ubuntu-latest
    container: ghcr.io/fenics/test-env:v0.7.2-mpich

    strategy:
      matrix:
        # Complex mode not working
        run_mode: ["Release", "Debug"]
        petsc_mode: [real]
        CXX: [c++]
        CC: [cc]
        # exclude:
        #   - CC: cc
        #     CXX: clang++
        #   - CC: clang
        #     CXX: c++
    env:
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
      PETSC_ARCH: linux-gnu-real64-32
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_rmaps_base_oversubscribe: 1
      OMPI_MCA_plm: isolated
      OMPI_MCA_btl_vader_single_copy_mechanism: none
      OMPI_MCA_mpi_yield_when_idle: 1
      OMPI_MCA_hwloc_base_binding_policy: none
      CONTACT_CMAKE_CXX_FLAGS: "-Wall -Werror -g -pedantic -Ofast -march=native"
    steps:
      - uses: actions/checkout@v3

      # - name: Install clang
      #   if: ${{ matrix.CC }} == "clang"
      #   run: |
      #     apt-get update
      #     apt-get install -y clang

      - name: Get Basix and install
        uses: actions/checkout@v3
        with:
          path: ./basix
          repository: FEniCS/basix
          ref: v0.7.0

      - name: Install FEniCS Python components (dolfinx)
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -B build-basix -S ./basix/cpp
          cmake --build build-basix
          cmake --install build-basix
          python3 -m pip install ./basix/python
          python3 -m pip install git+https://github.com/FEniCS/ufl.git@2023.2.0
          python3 -m pip install git+https://github.com/FEniCS/ffcx.git@v0.7.0
      
      - name: Install dolfinx
        uses: actions/checkout@v3
        with:
          path: ./dolfinx
          repository: FEniCS/dolfinx
          ref: v0.7.2
   

      - name: Configure C++ (dolfinx)
        run: cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -B build-dolfinx -S ./dolfinx/cpp/

      - name: Build and install C++ library (dolfinx)
        run: |
          cmake --build build-dolfinx
          cmake --install build-dolfinx

      - name: Build Python interface (dolfinx)
        run: python3 -m pip -v install ./dolfinx/python/


      - name: Install contact (C++)
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.run_mode }} -DCMAKE_CXX_FLAGS="${CONTACT_CMAKE_CXX_FLAGS}" -B build-contact -S cpp/
          ninja -C build-contact install

      - name: Run demos (C++)
        run: |
          cd cpp/demos/meshtie
          cmake -G Ninja -B build-dir
          ninja -C build-dir
          ./build-dir/demo_meshtie
          mpirun -np 2 ./build-dir/demo_meshtie
          cd ../meshtieNewton
          cmake -G Ninja -B build-dir
          ninja -C build-dir
          ./build-dir/demo_meshtie
          mpirun -np 2 ./build-dir/demo_meshtie
          cd ../meshtieHeatTransfer
          cmake -G Ninja -B build-dir
          ninja -C build-dir
          ./build-dir/demo_meshtie
          mpirun -np 2 ./build-dir/demo_meshtie
          cd ../meshtieHeatEquation
          cmake -G Ninja -B build-dir
          ninja -C build-dir
          ./build-dir/demo_meshtie
          mpirun -np 2 ./build-dir/demo_meshtie

      - name: Install contact
        run: BUILD_TYPE="Debug" python3 -m pip -v install python/

      - name: Flake8 code
        run: flake8 python/

      - name: Run mypy checks
        run: |
          pip3 install mypy
          cd python
          python3 -m mypy . --exclude=build

      - name: Run demos
        run: |
          cd python/demos
          mkdir -p results
          mkdir -p meshes
          python3 compare_custom_snes_one_sided.py
          python3 compare_nitsche_snes.py
          python3 demo_nitsche_rigid_surface_ufl.py
          python3 demo_nitsche_rigid_surface_custom.py
          python3 nitsche_euler_bernoulli.py
          python3 demo_nitsche_unbiased.py --problem=1
          python3 demo_nitsche_unbiased.py --problem=2 --friction=0.1
          python3 demo_nitsche_unbiased.py --problem=3
          python3 demo_nitsche_unbiased.py --problem=3 --3D --friction=0.1 --coulomb
          python3 demo_nitsche_meshties.py
          python3 meshtie_convergence.py --3D
          python3 meshtie_convergence.py --simplex --3D
          python3 meshtie_convergence.py
          python3 meshtie_convergence.py --simplex --runs=4
          cd oxford
          python3 blocks_nitsche.py
          cd ../meshtie_demos
          python3 blocks_nitsche_meshtie.py
          python3 poisson_convergence.py --simplex --runs=4
          python3 poisson_convergence.py --3D
          python3 demo_poisson.py

      - name: Run tests
        run: |
          cd python/tests
          mkdir -p meshes
          python3 -m pytest . -vs

      - name: Run demos parallel
        run: |
          cd python/demos
          mkdir -p results
          mkdir -p meshes
          mpirun -np 2 python3 demo_nitsche_unbiased.py --problem=1
          mpirun -np 2 python3 demo_nitsche_unbiased.py --problem=2 --friction=0.1
          mpirun -np 2 python3 demo_nitsche_unbiased.py --problem=3
          mpirun -np 2 python3 demo_nitsche_unbiased.py --problem=3 --3D --friction=0.1 --coulomb
          mpirun -np 2 python3 demo_nitsche_meshties.py
          mpirun -np 2 python3 meshtie_convergence.py --3D
          mpirun -np 2 python3 meshtie_convergence.py --simplex --3D
          mpirun -np 2 python3 meshtie_convergence.py
          mpirun -np 2 python3 meshtie_convergence.py --simplex --runs=4
