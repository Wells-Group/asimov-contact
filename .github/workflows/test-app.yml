name: Test Nitsche solver

on:
  # Trigger tests on push
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  schedule:
    # '*' is a special character in YAML, so string must be quoted
    - cron: "0 1 * * *"
jobs:
  build:
    if: "!(contains(github.event.head_commit.message, '[ci skip]') || contains(github.event.head_commit.message, '[skip ci]'))"
    runs-on: ubuntu-20.04
    container: dolfinx/dev-env

    strategy:
      matrix:
        # Complex mode not working in CUAS
        petsc_mode: [real]
        petsc_int_type: [32, 64]
        CXX: [c++, clang++]
        CC: [cc, clang]
        exclude:
          - CC: cc
            CXX: clang++
          - CC: clang
            CXX: c++
    env:
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
      HDF5_MPI: "ON"
      HDF5_DIR: "/usr/lib/x86_64-linux-gnu/hdf5/mpich/"
      PETSC_ARCH: linux-gnu-${{ matrix.petsc_mode }}-${{ matrix.petsc_int_type }}
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_rmaps_base_oversubscribe: 1
      OMPI_MCA_plm: isolated
      OMPI_MCA_btl_vader_single_copy_mechanism: none
      OMPI_MCA_mpi_yield_when_idle: 1
      OMPI_MCA_hwloc_base_binding_policy: none
      CONTACT_CMAKE_CXX_FLAGS: "-Wall -Werror -g -pedantic -Ofast -march=native"
    steps:
      - uses: actions/checkout@v2
      
      - name: Get Basix and install
        uses: actions/checkout@v2
        with:
          path: ./basix
          repository: FEniCS/basix
          ref: main

      - name: Install FEniCS Python components (dolfinx)
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -B build-basix -S ./basix/cpp
          cmake --build build-basix
          cmake --install build-basix
          python3 -m pip install ./basix/python
          python3 -m pip install git+https://github.com/FEniCS/ufl.git
          python3 -m pip install git+https://github.com/FEniCS/ffcx.git
      - name: Install dolfinx
        uses: actions/checkout@v2
        with:
          path: ./dolfinx
          repository: FEniCS/dolfinx
          ref: main

      - name: Configure C++ (dolfinx)
        run: cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -B build-dolfinx -S ./dolfinx/cpp/

      - name: Build and install C++ library (dolfinx)
        run: |
          cmake --build build-dolfinx
          cmake --install build-dolfinx

      - name: Build Python interface (dolfinx)
        run: python3 -m pip -v install ./dolfinx/python/

      - name: Get Custom assemblers
        uses: actions/checkout@v2
        with:
          path: ./asimov-custom-assemblers
          repository: Wells-Group/asimov-custom-assemblers
          ref: main

      - name: Install custom assemblers (C++)
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -B build-cuas -S ./asimov-custom-assemblers/cpp
          ninja -C build-cuas install

      - name: Install custom assemblers
        run: BUILD_TYPE=Debug python3 -m pip -v install ./asimov-custom-assemblers/python/

      - name: Install contact (C++)
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="${CONTACT_CMAKE_CXX_FLAGS}" -B build-contact -S cpp/
          ninja -C build-contact install

      - name: Install contact
        run: BUILD_TYPE="Debug" python3 -m pip -v install python/

      - name: Flake8 code
        run: flake8 python/

      - name: Run mypy checks
        run: |
          pip3 install mypy
          cd python
          python3 -m mypy . --exclude=build

      - name: Run demos
        run: |
          cd python/demos
          mkdir -p results
          mkdir -p meshes
          python3 compare_custom_snes_one_sided.py
          python3 compare_nitsche_snes.py
          python3 demo_nitsche_rigid_surface_ufl.py
          python3 demo_nitsche_rigid_surface_custom.py
          python3 nitsche_euler_bernoulli.py
          python3 demo_nitsche_unbiased.py --problem=1
          python3 demo_nitsche_unbiased.py --problem=2
          python3 demo_nitsche_unbiased.py --problem=3
          python3 demo_nitsche_unbiased.py --problem=3 --3D
          python3 demo_nitsche_meshties.py
          python3 meshtie_convergence.py --3D
          python3 meshtie_convergence.py --simplex --3D
          python3 meshtie_convergence.py 
          python3 meshtie_convergence.py --simplex --runs=4

      - name: Run tests
        run: |
          cd python/tests
          mkdir -p meshes
          python3 -m pytest . -vs
